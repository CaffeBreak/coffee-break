# coding: utf-8

"""
    Caffe Break API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, field_validator
from pydantic import Field
from typing_extensions import Annotated
from caffe_break_client.models.room_create200_response_phase import RoomCreate200ResponsePhase
from caffe_break_client.models.room_create200_response_players_inner import RoomCreate200ResponsePlayersInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RoomCreate200Response(BaseModel):
    """
    RoomCreate200Response
    """ # noqa: E501
    id: Annotated[str, Field(strict=True)]
    password: Annotated[str, Field(strict=True)]
    owner_id: Annotated[str, Field(strict=True)] = Field(alias="ownerId")
    phase: RoomCreate200ResponsePhase
    players: List[RoomCreate200ResponsePlayersInner]
    day: Annotated[int, Field(strict=True, ge=0)]
    __properties: ClassVar[List[str]] = ["id", "password", "ownerId", "phase", "players", "day"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9a-z]{10}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-z]{10}$/")
        return value

    @field_validator('password')
    def password_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[^\s]{1,16}$", value):
            raise ValueError(r"must validate the regular expression /^[^\s]{1,16}$/")
        return value

    @field_validator('owner_id')
    def owner_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9a-z]{10}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-z]{10}$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RoomCreate200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of phase
        if self.phase:
            _dict['phase'] = self.phase.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in players (list)
        _items = []
        if self.players:
            for _item in self.players:
                if _item:
                    _items.append(_item.to_dict())
            _dict['players'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RoomCreate200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "password": obj.get("password"),
            "ownerId": obj.get("ownerId"),
            "phase": RoomCreate200ResponsePhase.from_dict(obj.get("phase")) if obj.get("phase") is not None else None,
            "players": [RoomCreate200ResponsePlayersInner.from_dict(_item) for _item in obj.get("players")] if obj.get("players") is not None else None,
            "day": obj.get("day")
        })
        return _obj


